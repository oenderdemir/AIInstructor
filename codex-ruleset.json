{
  "name": "AIInstructor Codex Ruleset",
  "version": "1.3",
  "description": "AIInstructor projesinde .NET 8 (Backend) ve Angular 19 - primeng (Frontend) için kod oluşturma ve konumlandırma kuralları",
  "metadata": {
    "author": "Önder DEMİR",
    "organization": "SW Engineer",
    "lastUpdated": "2025-10-31"
  },
  "principles": {
    "verticalSliceArchitecture": [
      "Her feature kendi bağımsız Entity, DTO, Repository, Service, Controller ve Mapper klasörlerine sahip olmalıdır.",
      "Cross-cutting concerns (Logging, Auth, Exception Handling) 'Shared' altında tutulmalıdır.",
      "Application katmanında DTO'lar, Domain katmanında Entity'ler, Infrastructure katmanında Repository'ler yer almalıdır.",
      "Her dilim (slice) bağımsız test edilebilir olmalıdır.",
      "Mapper profilleri feature bazlı olmalıdır (ör. RollerProfile)."
    ],
    "cleanCode": [
      "Yöntemler tek bir sorumluluk taşımalıdır (SRP).",
      "Magic number veya string kullanılmamalıdır.",
      "Kodun amacı net olmalı, yorum satırları açıklama için değil istisna için kullanılmalıdır.",
      "Try-catch blokları yalnızca kontrol altına alınması gereken durumlar için kullanılmalıdır.",
      "Bağımlılıklar constructor injection yöntemiyle sağlanmalıdır.",
      "Async işlemler her zaman await ile tamamlanmalıdır.",
      "Değişken, method ve class isimleri İngilizce ve anlamlı olmalıdır.",
      "Tekrarlayan kod (duplication) helper veya base sınıflara taşınmalıdır."
    ],
    "testing": {
      "framework": "xUnit",
      "mocking": "Moq",
      "principles": [
        "Her servis metodu için pozitif ve negatif senaryolar test edilmelidir.",
        "InMemoryDbContext ile repository testleri yapılmalıdır.",
        "Test isimleri 'MethodName_ShouldExpectedBehavior_WhenCondition' formatında olmalıdır.",
        "Arrange-Act-Assert düzeni izlenmelidir.",
        "Mock nesneler bağımlılıkları izole etmek için kullanılmalıdır.",
        "Controller testlerinde sadece iş mantığının doğru yönlendiği doğrulanmalıdır."
      ]
    },
    "codeReviewChecklist": [
      "Entity isimleri tekil mi?",
      "DTO ve Entity alanları tutarlı mı?",
      "Mapper konfigürasyonu doğru mu?",
      "Exception handling merkezi mi?",
      "Loglama anlamlı context bilgisi içeriyor mu?",
      "Kod okunabilir ve tekrar kullanılabilir mi?",
      "Unit test kapsamı yeterli mi?",
      "UI component’lerinde gereksiz state yönetimi var mı?"
    ]
  },
  "projectStructure": {
    "backendRoot": "src",
    "frontendRoot": "AllInstructor-ClientApp/src/app",
    "backendFeatureFolders": [
      "Entity",
      "DTO",
      "Repository",
      "Service",
      "Mapper",
      "Controller"
    ],
    "frontendFeatureFolders": [
      "<feature>-yonetimi"
    ]
  },
  "generationRules": {
    "backend": {
      "entityPath": "src/{{Feature}}/Entity/{{EntityName}}.cs",
      "dtoPath": "src/{{Feature}}/DTO/{{EntityName}}Dto.cs",
      "repositoryPath": "src/{{Feature}}/Repository/{{EntityName}}Repository.cs",
      "repositoryInterfacePath": "src/{{Feature}}/Repository/I{{EntityName}}Repository.cs",
      "servicePath": "src/{{Feature}}/Service/{{EntityName}}Service.cs",
      "serviceInterfacePath": "src/{{Feature}}/Service/I{{EntityName}}Service.cs",
      "mapperPath": "src/{{Feature}}/Mapper/{{Feature}}Profile.cs",
      "controllerPath": "src/{{Feature}}/Controller/{{EntityName}}Controller.cs"
    },
    "frontend": {
      "folder": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi",
      "model": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi/{{feature}}.model.ts",
      "service": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi/{{feature}}.service.ts",
      "componentTs": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi/{{feature}}-yonetimi.component.ts",
      "componentHtml": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi/{{feature}}-yonetimi.component.html",
      "componentScss": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi/{{feature}}-yonetimi.component.scss"
    }
  },
  "templates": {
    "entity": "using AIInstructor.src.Shared.RDBMS.Entity;\n\nnamespace AIInstructor.src.{{Feature}}.Entity\n{\n    public class {{EntityName}} : BaseEntity\n    {\n        public string? Ad { get; set; }\n        public string? Domain { get; set; }\n    }\n}",
    "dto": "using AIInstructor.src.Shared.RDBMS.Dto;\n\nnamespace AIInstructor.src.{{Feature}}.DTO\n{\n    public class {{EntityName}}Dto : BaseRDBMSDto\n    {\n        public string? Ad { get; set; }\n        public string? Domain { get; set; }\n    }\n}",
    "mapper": "using AutoMapper;\nusing AIInstructor.src.{{Feature}}.DTO;\nusing AIInstructor.src.{{Feature}}.Entity;\n\nnamespace AIInstructor.src.{{Feature}}.Mapper\n{\n    public class {{Feature}}Profile : Profile\n    {\n        public {{Feature}}Profile()\n        {\n            CreateMap<{{EntityName}}, {{EntityName}}Dto>().ReverseMap();\n        }\n    }\n}",
    "repository_interface": "using AIInstructor.src.{{Feature}}.Entity;\nusing AIInstructor.src.Shared.RDBMS.Repository;\n\nnamespace AIInstructor.src.{{Feature}}.Repository\n{\n    public interface I{{EntityName}}Repository : IBaseRepository<{{EntityName}}>\n    {\n        Task<{{EntityName}}> GetByNameAsync(string name);\n        Task<IEnumerable<{{EntityName}}>> View{{EntityName}}ListAsync();\n    }\n}",
    "repository_impl": "using AutoMapper;\nusing Microsoft.EntityFrameworkCore;\nusing AIInstructor.src.Context;\nusing AIInstructor.src.{{Feature}}.Entity;\nusing AIInstructor.src.Shared.RDBMS.Repository;\n\nnamespace AIInstructor.src.{{Feature}}.Repository\n{\n    public class {{EntityName}}Repository : BaseRepository<{{EntityName}}>, I{{EntityName}}Repository\n    {\n        private readonly VTSDbContext _context;\n        public {{EntityName}}Repository(VTSDbContext context, IMapper mapper)\n            : base(context, mapper)\n        {\n            _context = context;\n        }\n\n        public async Task<{{EntityName}}> GetByNameAsync(string name)\n        {\n            return await base.FirstOrDefaultAsync(r => r.Ad == name);\n        }\n\n        public async Task<IEnumerable<{{EntityName}}>> View{{EntityName}}ListAsync()\n        {\n            return await base.Where(e => e.Ad.Contains(\"View\")).ToListAsync();\n        }\n    }\n}",
    "service_interface": "using AIInstructor.src.{{Feature}}.DTO;\nusing AIInstructor.src.{{Feature}}.Entity;\nusing AIInstructor.src.Shared.RDBMS.Service;\n\nnamespace AIInstructor.src.{{Feature}}.Service\n{\n    public interface I{{EntityName}}Service : IBaseService<{{EntityName}}Dto, {{EntityName}}>\n    {\n        Task<{{EntityName}}Dto> GetByNameAsync(string name);\n        Task<IEnumerable<{{EntityName}}Dto>> View{{EntityName}}ListAsync();\n    }\n}",
    "service_impl": "using AutoMapper;\nusing AIInstructor.src.{{Feature}}.DTO;\nusing AIInstructor.src.{{Feature}}.Entity;\nusing AIInstructor.src.Shared.RDBMS.Service;\nusing AIInstructor.src.Shared.Repository;\n\nnamespace AIInstructor.src.{{Feature}}.Service\n{\n    public class {{EntityName}}Service : BaseService<{{EntityName}}Dto, {{EntityName}}>, I{{EntityName}}Service\n    {\n        private readonly I{{EntityName}}Repository _repository;\n\n        public {{EntityName}}Service(I{{EntityName}}Repository repository, IMapper mapper)\n            : base(repository, mapper)\n        {\n            _repository = repository;\n        }\n\n        public async Task<{{EntityName}}Dto> GetByNameAsync(string name)\n        {\n            var entity = await _repository.GetByNameAsync(name);\n            return _mapper.Map<{{EntityName}}Dto>(entity);\n        }\n\n        public async Task<IEnumerable<{{EntityName}}Dto>> View{{EntityName}}ListAsync()\n        {\n            var entities = await _repository.View{{EntityName}}ListAsync();\n            return _mapper.Map<IEnumerable<{{EntityName}}Dto>>(entities);\n        }\n    }\n}",
    "controller": "using Microsoft.AspNetCore.Mvc;\nusing AIInstructor.src.{{Feature}}.DTO;\nusing AIInstructor.src.{{Feature}}.Service;\nusing AIInstructor.src.Shared.Attributes;\nusing AIInstructor.src.Shared.Controller;\n\nnamespace AIInstructor.src.{{Feature}}.Controller\n{\n    public class {{EntityName}}Controller : UIController\n    {\n        private readonly I{{EntityName}}Service _service;\n        public {{EntityName}}Controller(I{{EntityName}}Service service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"View{{EntityName}}List\")]\n        [Permission(\"{{EntityName}}Yonetimi.View\")]\n        public async Task<IEnumerable<{{EntityName}}Dto>> ViewList()\n        {\n            return await _service.View{{EntityName}}ListAsync();\n        }\n\n        [HttpGet]\n        [Permission(\"{{EntityName}}Yonetimi.View\")]\n        public async Task<IEnumerable<{{EntityName}}Dto>> GetAll()\n        {\n            return await _service.GetAllAsync();\n        }\n    }\n}",
    "frontend_model": "export interface {{EntityName}}Model {\n  id: number;\n  ad: string;\n  domain: string;\n}",
    "frontend_service": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { {{EntityName}}Model } from './{{feature}}.model';\n\n@Injectable({ providedIn: 'root' })\nexport class {{EntityName}}Service {\n  private apiUrl = environment.apiUrl + '/{{EntityName}}';\n  constructor(private http: HttpClient) {}\n\n  getAll(): Observable<{{EntityName}}Model[]> {\n    return this.http.get<{{EntityName}}Model[]>(this.apiUrl);\n  }\n\n  create(model: {{EntityName}}Model): Observable<{{EntityName}}Model> {\n    return this.http.post<{{EntityName}}Model>(this.apiUrl, model);\n  }\n\n  update(model: {{EntityName}}Model): Observable<void> {\n    return this.http.put<void>(`${this.apiUrl}/${model.id}`, model);\n  }\n\n  delete(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}",
    "frontend_component_ts": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TableModule } from 'primeng/table';\nimport { ButtonModule } from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ToastModule } from 'primeng/toast';\nimport { ConfirmDialog } from 'primeng/confirmdialog';\nimport { ConfirmationService, MessageService } from 'primeng/api';\nimport { DividerModule } from 'primeng/divider';\nimport { AuthService } from '../authentication/auth.service';\nimport { {{EntityName}}Service } from './{{feature}}.service';\nimport { {{EntityName}}Model } from './{{feature}}.model';\n\n@Component({\n  selector: 'app-{{feature}}-yonetimi',\n  standalone: true,\n  templateUrl: './{{feature}}-yonetimi.component.html',\n  imports: [\n    CommonModule,\n    FormsModule,\n    TableModule,\n    ButtonModule,\n    DialogModule,\n    InputTextModule,\n    DividerModule,\n    ConfirmDialog,\n    ToastModule\n  ],\n  providers: [ConfirmationService, MessageService]\n})\nexport class {{EntityName}}YonetimiComponent implements OnInit {\n  items: {{EntityName}}Model[] = [];\n  selected: {{EntityName}}Model = this.empty();\n  displayDialog = false;\n  isEditMode = false;\n\n  constructor(\n    private service: {{EntityName}}Service,\n    private confirmation: ConfirmationService,\n    private message: MessageService,\n    public auth: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.load();\n  }\n\n  load() {\n    this.service.getAll().subscribe(data => (this.items = data));\n  }\n\n  empty(): {{EntityName}}Model {\n    return { id: 0, ad: '', domain: '' };\n  }\n\n  openNew() {\n    this.selected = this.empty();\n    this.isEditMode = false;\n    this.displayDialog = true;\n  }\n\n  edit(item: {{EntityName}}Model) {\n    this.selected = { ...item };\n    this.isEditMode = true;\n    this.displayDialog = true;\n  }\n\n  save() {\n    const req = this.isEditMode\n      ? this.service.update(this.selected)\n      : this.service.create(this.selected);\n\n    req.subscribe(() => {\n      this.load();\n      this.displayDialog = false;\n      this.message.add({ severity: 'success', summary: 'Başarılı', detail: this.isEditMode ? '{{EntityName}} güncellendi' : 'Yeni {{EntityName}} eklendi' });\n    });\n  }\n\n  delete(item: {{EntityName}}Model) {\n    this.confirmation.confirm({\n      message: 'Bu kaydı silmek istiyor musunuz?',\n      header: 'Onay',\n      icon: 'pi pi-exclamation-triangle',\n      acceptButtonStyleClass: 'p-button-danger',\n      rejectButtonStyleClass: 'p-button-secondary',\n      accept: () => {\n        this.service.delete(item.id).subscribe(() => {\n          this.load();\n          this.message.add({ severity: 'success', summary: 'Başarılı', detail: '{{EntityName}} silindi' });\n        });\n      }\n    });\n  }\n}",
    "frontend_component_html": "<div class='p-m-4'>\n  <p-button *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\" label='Yeni {{EntityName}} Ekle' icon='pi pi-plus' (onClick)='openNew()' severity='success'></p-button>\n  <p-divider></p-divider>\n  <p-toast />\n  <p-confirmdialog />\n  <p-table [value]='items' tableStyleClass='p-datatable-sm'>\n    <ng-template pTemplate='header'>\n      <tr>\n        <th>Domain</th>\n        <th>Ad</th>\n        <th *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\">İşlemler</th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate='body' let-item>\n      <tr>\n        <td>{{ item.domain }}</td>\n        <td>{{ item.ad }}</td>\n        <td *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\">\n          <p-button icon='pi pi-pencil' (onClick)='edit(item)' class='p-button-sm' severity='info'></p-button>\n          <p-button icon='pi pi-trash' (onClick)='delete(item)' class='p-button-sm' severity='danger'></p-button>\n        </td>\n      </tr>\n    </ng-template>\n  </p-table>\n\n  <p-dialog header='{{ isEditMode ? \"{{EntityName}} Düzenle\" : \"Yeni {{EntityName}}\" }}' [(visible)]='displayDialog' [modal]='true' [style]='{ width: \"400px\" }'>\n    <div class='p-fluid p-3'>\n      <div class='field'>\n        <label for='domain'>Domain</label>\n        <input id='domain' pInputText [(ngModel)]='selected.domain' class='w-full' />\n      </div>\n      <div class='field'>\n        <label for='ad'>Ad</label>\n        <input id='ad' pInputText [(ngModel)]='selected.ad' class='w-full' />\n      </div>\n    </div>\n    <p-divider></p-divider>\n    <ng-template pTemplate='footer'>\n      <div class='flex justify-end gap-2'>\n        <p-button label='İptal' icon='pi pi-times' (onClick)='displayDialog = false' severity='secondary'></p-button>\n        <p-button label='Kaydet' icon='pi pi-check' (onClick)='save()' severity='success'></p-button>\n      </div>\n    </ng-template>\n  </p-dialog>\n</div>"
  }
}
