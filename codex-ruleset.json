{
  "name": "AIInstructor Codex Ruleset",
  "version": "2.1",
  "description": "AIInstructor projesi için modüle özgü alanları dinamik olarak işleyen, .NET 8 + Angular 17 VSA + Clean Code + Test uyumlu kurallar.",
  "metadata": {
    "author": "Önder DEMİR",
    "organization": "BTK - Yazılım, Servis ve Altyapı Birimi",
    "lastUpdated": "2025-10-31"
  },
  "principles": {
    "verticalSliceArchitecture": [
      "Her feature kendi Entity, DTO, Repository, Service, Mapper ve Controller yapısına sahip olmalıdır.",
      "Shared modüller altında temel base sınıflar tanımlanmalıdır.",
      "Entity ve DTO’lar birbirine AutoMapper profiliyle bağlanmalıdır.",
      "Katmanlar arası bağımlılıklar sadece alt katmanlara doğru olmalıdır."
    ],
    "cleanCode": [
      "Kod okunabilir, sade ve anlamlı isimlendirmelere sahip olmalıdır.",
      "Async işlemler her zaman await ile tamamlanmalıdır.",
      "Try-catch yalnızca gerekli durumlarda kullanılmalıdır.",
      "Tekrarlayan kod helper veya base class'lara taşınmalıdır.",
      "Bir sınıf tek bir sorumluluğa sahip olmalıdır (SRP)."
    ],
    "testing": {
      "framework": "xUnit",
      "mocking": "Moq",
      "rules": [
        "Service katmanındaki metotlar için hem pozitif hem negatif testler yazılmalıdır.",
        "Repository testlerinde InMemoryDbContext kullanılmalıdır.",
        "Arrange-Act-Assert yapısı izlenmelidir."
      ]
    },
    "reviewChecklist": [
      "Entity ve DTO alanları senkron mu?",
      "Service’teki async işlemler doğru yönetiliyor mu?",
      "Exception handling merkezi mi?",
      "Mapper profilleri doğru yapılandırılmış mı?",
      "Kod tekrarları (duplication) var mı?",
      "Unit test kapsamı yeterli mi?"
    ]
  },
  "generationRules": {
    "entityFields": [
      {
        "type": "string",
        "name": "Ad",
        "example": "Test"
      },
      {
        "type": "string",
        "name": "Domain",
        "example": "example.com"
      }
    ],
    "backend": {
      "basePath": "src/{{Feature}}",
      "subFolders": [
        "Entity",
        "DTO",
        "Repository",
        "Service",
        "Mapper",
        "Controller"
      ]
    },
    "frontend": {
      "basePath": "AllInstructor-ClientApp/src/app/{{feature}}-yonetimi"
    }
  },
  "templates": {
    "entity": "using AIInstructor.src.Shared.RDBMS.Entity;\n\nnamespace AIInstructor.src.{{Feature}}.Entity\n{\n    public class {{EntityName}} : BaseEntity\n    {\n{{#each fields}}\n        public {{type}} {{name}} { get; set; }\n{{/each}}\n    }\n}",
    "dto": "using AIInstructor.src.Shared.RDBMS.Dto;\n\nnamespace AIInstructor.src.{{Feature}}.DTO\n{\n    public class {{EntityName}}Dto : BaseRDBMSDto\n    {\n{{#each fields}}\n        public {{type}}? {{name}} { get; set; }\n{{/each}}\n    }\n}",
    "mapper": "using AutoMapper;\nusing AIInstructor.src.{{Feature}}.DTO;\nusing AIInstructor.src.{{Feature}}.Entity;\n\nnamespace AIInstructor.src.{{Feature}}.Mapper\n{\n    public class {{Feature}}Profile : Profile\n    {\n        public {{Feature}}Profile()\n        {\n            CreateMap<{{EntityName}}, {{EntityName}}Dto>().ReverseMap();\n        }\n    }\n}",
    "frontend_model": "export interface {{EntityName}}Model {\n{{#each fields}}\n  {{name}}: {{tsType}};\n{{/each}}\n}",
    "frontend_component_html": "<div class='p-m-4'>\n  <p-button *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\" label='Yeni {{EntityName}} Ekle' icon='pi pi-plus' (onClick)='openNew()' severity='success'></p-button>\n  <p-divider></p-divider>\n  <p-table [value]='items' tableStyleClass='p-datatable-sm'>\n    <ng-template pTemplate='header'>\n      <tr>\n{{#each fields}}\n        <th>{{name}}</th>\n{{/each}}\n        <th *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\">İşlemler</th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate='body' let-item>\n      <tr>\n{{#each fields}}\n        <td>{{ '{{' }}item.{{lower name}}{{ '}}' }}</td>\n{{/each}}\n        <td *ngIf=\"auth.hasRole('{{EntityName}}Yonetimi.Manage')\">\n          <p-button icon='pi pi-pencil' (onClick)='edit(item)' class='p-button-sm' severity='info'></p-button>\n          <p-button icon='pi pi-trash' (onClick)='delete(item)' class='p-button-sm' severity='danger'></p-button>\n        </td>\n      </tr>\n    </ng-template>\n  </p-table>\n  <p-dialog header='{{ isEditMode ? \"{{EntityName}} Düzenle\" : \"Yeni {{EntityName}}\" }}' [(visible)]='displayDialog' [modal]='true'>\n    <div class='p-fluid p-3'>\n{{#each fields}}\n      <div class='field'>\n        <label for='{{lower name}}'>{{name}}</label>\n        <input id='{{lower name}}' pInputText [(ngModel)]='selected.{{lower name}}' class='w-full' />\n      </div>\n{{/each}}\n    </div>\n  </p-dialog>\n</div>"
  }
}